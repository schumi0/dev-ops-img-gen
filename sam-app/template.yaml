AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 350
    MemorySize: 128

Resources:
  ImageGenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./sam-app/image_gen/app.py
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment: 
        Variables:
          S3_BUCKET: "pgr301-couch-explorers"
          CANDIDATE_NR: "55"
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
            - "s3:PutObject"
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::pgr301-couch-explorers/55/*"
      - Statement:
          Effect: Allow
          Action:
            - "bedrock:InvokeModel"
          Resource: "*"
      Architectures:
        - x86_64
      Events:
        ImageGen:
          Type: Api
          Properties:
            Path: /generate
            Method: post

  ReqSQSImageGen:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "cara011-Image-SQS-Function"
      DelaySeconds: 10
      VisibilityTimeout: 360

  ImageGenQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./infrastructure/lambda_sqs.py
      Handler: lambda_sqs.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: "pgr301-couch-explorers"
          MODEL_NAME: "titan-v1"
          CANDIDATE_NR: "55"
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReqSQSImageGen.Arn
        ApiEvent:
          Type: Api
          Properties:
            Parth: /generate-que-request
            Method: post
        DependsOn: ReqSQSImageGEn
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:ListBucket"
            Resource:
              - "arn:aws:s3:::pgr301-couch-explorers/55/*"
        - Statement:
            Effect: Allow
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
            Resource: !GetAtt ReqSQSImageGen.Arn
        - Statement:
            Effect: Allow
            Action:
              - "bedrock:InvokeModel"
            Resource: "*"


  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: "*"
              - Effect: Allow
                Action: "bedrock:InvokeModel"
                Resource: "*"
              

#Edited from the original SAM-app template generator
Outputs:
  ImageGenApi:
    Description: "API Gateway endpoint URL for Prod stage for Image Gen function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/generate/"
  ImageGenFunction:
    Description: "Image Gen Lambda Function ARN"
    Value: !GetAtt ImageGenFunction.Arn
  ImageGenIamRole:
    Description: "Implicit IAM Role created for Image Gen Function"
    Value: !GetAtt ImageGenFunctionRole.Arn
  QueueUrl:
    Description: "SQS Queue URL"
    Value: !Ref ReqSQSImageGen
  AddToQueueApi:
    Description: "API Gateway endpoint for adding messages to SQS. /Prod/generate-que-request/"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/generate-que-request/"